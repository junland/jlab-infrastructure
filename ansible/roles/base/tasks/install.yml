---
- name: Check if EPEL repo is already configured
  stat:
    path: "{{ epel_repofile_path }}"
  register: epel_repofile_result
  when: ansible_os_family == 'RedHat' or ansible_os_family == 'CentOS'

- name: Check if Docker repo is already configured
  stat:
    path: "{{ docker_repofile_path }}"
  register: docker_repofile_result
  when: ansible_os_family == 'RedHat' or ansible_os_family == 'CentOS'

- name: Install EPEL repo
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: "{{ epel_repo_url }}"
    state: present
  register: result
  until: result is succeeded
  retries: 5
  delay: 10
  when: not epel_repofile_result.stat.exists and ansible_os_family == 'RedHat' or ansible_os_family == 'CentOS'
  
- name: Import EPEL GPG key
  rpm_key:
    key: "{{ epel_repo_gpg_key_url }}"
    state: present
  ignore_errors: "{{ ansible_check_mode }}"
  when: not epel_repofile_result.stat.exists and ansible_os_family == 'RedHat' or ansible_os_family == 'CentOS'

- name: Install Docker repo
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: "{{ docker_repo_url }}"
    state: present
  register: result
  until: result is succeeded
  retries: 5
  delay: 10
  when: not docker_repofile_result.stat.exists and ansible_os_family == 'RedHat' or ansible_os_family == 'CentOS'

- name: Install git
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: git
    state: latest

- name: Install make
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: make
    state: latest

- name: Install wget
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: wget
    state: latest

- name: Install curl
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: curl
    state: latest

- name: Install htop
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: htop
    state: latest

- name: Install nmon
  action: "{{ ansible_pkg_mgr }}"
  args:
    name: nmon
    state: latest

- name: Get monitoring package (Prometheus Node Exporter)
  get_url:
    url: https://github.com/prometheus/node_exporter/releases/download/v{{ mon_ver }}/node_exporter-{{ mon_ver }}.linux-amd64.tar.gz
    dest: /tmp/node_exporter-{{ mon_ver }}.linux-amd64.tar.gz

- name: Wait until the file node_exporter is downloaded before continuing
  wait_for:
    delay: 5
    path: /tmp/node_exporter-{{ mon_ver }}.linux-amd64.tar.gz

- name: Extract monitoring package (Prometheus Node Exporter)
  unarchive:
    src: /tmp/node_exporter-{{ mon_ver }}.linux-amd64.tar.gz
    dest: /tmp/
    remote_src: yes
    exclude:
     - LICENSE
     - NOTICE

- name: Install monitoring package (Prometheus Node Exporter)
  command: mv /tmp/node_exporter-{{ mon_ver }}.linux-amd64/node_exporter /usr/local/bin